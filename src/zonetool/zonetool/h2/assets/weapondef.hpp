#pragma once
#include "../zonetool.hpp"

namespace zonetool::h2
{
	constexpr const char* anim_names[NUM_WEAP_ANIMS] =
	{
		"ROOT",
		"IDLE",
		"EMPTY_IDLE",
		"FIRE",
		"HOLD_FIRE",
		"LASTSHOT",
		"RECHAMBER",
		"GRENADE_PRIME",
		"GRENADE_PRIME_READY_TO_THROW",
		"MELEE_SWIPE",
		"MELEE_HIT",
		"MELEE_FATAL",
		"MELEE_MISS",
		"MELEE_VICTIM_CROUCHING_HIT",
		"MELEE_VICTIM_CROUCHING_FATAL",
		"MELEE_VICTIM_CROUCHING_MISS",
		"MELEE_ALT_STANDING",
		"MELEE_ALT_CROUCHING",
		"MELEE_ALT_PRONE",
		"MELEE_ALT_JUMPING",
		"MELEE_ALT_STANDING_VICTIM_CROUCHING",
		"MELEE_ALT_CROUCHING_VICTIM_CROUCHING",
		"MELEE_ALT_PRONE_VICTIM_CROUCHING",
		"MELEE_ALT_JUMPING_VICTIM_CROUCHING",
		"RELOAD",
		"UNK_26",
		"RELOAD_EMPTY", // UNK_28 & UNK_29 after this
		"UNK_28", // might not be in the right spot
		"UNK_29", // ^
		"RELOAD_START",
		"RELOAD_END",
		"FAST_RELOAD",
		"FAST_RELOAD_EMPTY",
		"FAST_RELOAD_START",
		"FAST_RELOAD_END",
		"DUALMAG_RELOAD",
		"DUALMAG_RELOAD_EMPTY",
		"SPEED_RELOAD",
		"RELOAD_FROM_ALT",
		"RAISE", // UNK_28 & UNK_29 before this
		"FIRST_RAISE",
		"BREACH_RAISE",
		"DROP",
		"ALT_RAISE",
		"ALT_DROP",
		"ALT_OVERRIDE",
		"QUICK_RAISE",
		"QUICK_DROP",
		"EMPTY_RAISE",
		"EMPTY_DROP",
		"HYBRID_SIGHT_ON",
		"HYBRID_SIGHT_OFF",
		"SPRINT_IN",
		"SPRINT_IN_FROM_SLIDE",
		"SPRINT_IN_CANCEL",
		"SPRINT_LOOP",
		"SPRINT_OUT",
		"SPRINTANDFIRE_IN",
		"SPRINTANDFIRE_LOOP",
		"SPRINTANDFIRE_OUT",
		"STUNNED_START",
		"STUNNED_LOOP",
		"STUNNED_END",
		"THROWBACK",
		"DETONATE",
		"NIGHTVISION_WEAR",
		"NIGHTVISION_REMOVE",
		"ADS_FIRE",
		"ADS_LASTSHOT",
		"ADS_RECHAMBER",
		"BLAST_FRONT",
		"BLAST_RIGHT",
		"BLAST_BACK",
		"BLAST_LEFT",
		"SLIDE_IN",
		"SLIDE_LOOP",
		"SLIDE_OUT_TO_SPRINT",
		"SLIDE_OUT",
		"SLIDE_AND_FIRE_IN",
		"SLIDE_AND_FIRE_LOOP",
		"SLIDE_AND_FIRE_OUT",
		"HIGH_JUMP_IN",
		"HIGH_JUMP_DROP_IN",
		"HIGH_JUMP_DROP_LOOP",
		"HIGH_JUMP_DROP_LAND",
		"DODGE_GROUND_BACK",
		"DODGE_GROUND_LEFT",
		"DODGE_GROUND_RIGHT",
		"DODGE_AIR_FORWARD",
		"DODGE_AIR_BACK",
		"DODGE_AIR_LEFT",
		"DODGE_AIR_RIGHT",
		"LAND_DIP",
		"RECOIL_SETTLE",
		"SWIM_LOOP",
		"MANTLE_UP_64",
		"MANTLE_UP_56",
		"MANTLE_UP_48",
		"MANTLE_UP_40",
		"MANTLE_UP_32",
		"MANTLE_UP_24",
		"MANTLE_UP_16",
		"MANTLE_OVER_64",
		"MANTLE_OVER_56",
		"MANTLE_OVER_48",
		"MANTLE_OVER_40",
		"MANTLE_OVER_32",
		"MANTLE_OVER_24",
		"MANTLE_OVER_16",
		"GOLIATH_ENTRY",
		"OFFHAND_SWITCH",
		"HEAT_COOLDOWN_IN",
		"HEAT_COOLDOWN_OUT",
		"OVERHEAT_OUT",
		"SCRIPTED",
		"INSPECTION",
		"UNK_117",
		"UNK_118",
		"UNK_119",
		"UNK_120",
		"UNK_121",
		"RELOAD_MULTIPLE_1",
		"RELOAD_MULTIPLE_2",
		"RELOAD_MULTIPLE_3",
		"RELOAD_MULTIPLE_4",
		"RELOAD_MULTIPLE_5",
		"RELOAD_MULTIPLE_6",
		"RELOAD_MULTIPLE_7",
		"RELOAD_MULTIPLE_8",
		"RELOAD_MULTIPLE_FAST_1",
		"RELOAD_MULTIPLE_FAST_2",
		"RELOAD_MULTIPLE_FAST_3",
		"RELOAD_MULTIPLE_FAST_4",
		"RELOAD_MULTIPLE_FAST_5",
		"RELOAD_MULTIPLE_FAST_6",
		"RELOAD_MULTIPLE_FAST_7",
		"RELOAD_MULTIPLE_FAST_8",
		"ADS_UP",
		"ADS_DOWN",
		"RECOIL",
		"WEAP_ALT_ANIM_ADJUST",
		"ADDITIVE_ADS_ROOT",
		"ADDITIVE_ADS_UP",
		"ADDITIVE_HYBRID_SIGHT_UP_ROOT",
		"ADDITIVE_HYBRID_SIGHT_UP",
		"ADDITIVE_DRAG_LEFT_ROOT",
		"ADDITIVE_DRAG_LEFT",
		"ADDITIVE_DRAG_RIGHT_ROOT",
		"ADDITIVE_DRAG_RIGHT",
		"ADDITIVE_DRAG_UP_ROOT",
		"ADDITIVE_DRAG_UP",
		"ADDITIVE_DRAG_DOWN_ROOT",
		"ADDITIVE_DRAG_DOWN",
		"ADDITIVE_SWIM_FORWARD_ROOT",
		"ADDITIVE_SWIM_FORWARD",
		"ADDITIVE_SWIM_BACKWARD_ROOT",
		"ADDITIVE_SWIM_BACKWARD",
		"ADDITIVE_JUMP_ROOT",
		"ADDITIVE_JUMP",
		"ADDITIVE_JUMP_BOOST",
		"ADDITIVE_JUMP_LAND_ROOT",
		"ADDITIVE_JUMP_LAND",
		"ADDITIVE_JUMP_LAND_HEAVY",
		"ADDITIVE_WALK_ROOT",
		"ADDITIVE_WALK",
		"UNK_166",
		"UNK_167",
		"ADDITIVE_HEAT_COOLDOWN_LOOP_ROOT",
		"ADDITIVE_HEAT_COOLDOWN_LOOP",
		"ADDITIVE_OVERHEAT_IN_ROOT",
		"ADDITIVE_OVERHEAT_IN",
		"ADDITIVE_OVERHEAT_LOOP_ROOT",
		"ADDITIVE_OVERHEAT_LOOP",
		"ADDITIVE_CRAWL_IN_ROOT",
		"ADDITIVE_CRAWL_IN",
		"ADDITIVE_CRAWL_LOOP_ROOT",
		"ADDITIVE_CRAWL_LOOP",
		"ADDITIVE_CRAWL_LOOP_BACK_ROOT",
		"ADDITIVE_CRAWL_LOOP_BACK",
		"ADDITIVE_CRAWL_LOOP_LEFT_ROOT",
		"ADDITIVE_CRAWL_LOOP_LEFT",
		"ADDITIVE_CRAWL_LOOP_RIGHT_ROOT",
		"ADDITIVE_CRAWL_LOOP_RIGHT",
		"ADDITIVE_PRONE_DROP_ROOT",
		"ADDITIVE_PRONE_DROP",
		"ADDITIVE_EMPTY_ROOT",
		"ADDITIVE_EMPTY",
		"ADDITIVE_MANTLE_ROOT",
		"ADDITIVE_MANTLE",
		"ADDITIVE_LOW_MANTLE_ROOT",
		"ADDITIVE_MANTLE_UP_24",
		"ADDITIVE_MANTLE_UP_16",
		"ADDITIVE_MANTLE_OVER_24",
		"ADDITIVE_MANTLE_OVER_16",
		"ADDITIVE_SHOT_CHARGE_IN_ROOT",
		"ADDITIVE_SHOT_CHARGE_IN",
		"ADDITIVE_SHOT_CHARGE_LOOP_ROOT",
		"ADDITIVE_SHOT_CHARGE_LOOP",
		"ADDITIVE_SCRIPTED_ROOT",
		"ADDITIVE_SCRIPTED",
		"UNK_201",
		"UNK_202",
	};

	class weapon_def : public asset_interface
	{
	private:
		std::string name_;
		WeaponDef* asset_ = nullptr;

		std::vector<std::pair<scr_string_t*, const char*>> script_strings;
		void add_script_string(scr_string_t* ptr, const char* str);
		const char* get_script_string(scr_string_t* ptr);

	public:
		WeaponDef* parse(const std::string& name, zone_memory* mem);

		void init(const std::string& name, zone_memory* mem) override;
		void prepare(zone_buffer* buf, zone_memory* mem) override;
		void load_depending(zone_base* zone) override;

		void* pointer() override { return asset_; }
		bool referenced() override { return name_.starts_with(","); }
		std::string name() override;
		std::int32_t type() override;
		void write(zone_base* zone, zone_buffer* buffer) override;

		static void dump(WeaponDef* asset);
	};
}